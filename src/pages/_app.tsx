// pages/_app.tsx

import type { AppProps } from 'next/app';
import { useRouter } from 'next/router'; // ðŸ‘ˆ Import useRouter
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { CacheProvider, EmotionCache } from '@emotion/react';
import createEmotionCache from '../createEmotionCache';
import { AuthProvider, useAuth } from '@/context/AuthContext'; // ðŸ‘ˆ Ensure useAuth is exported
import { CompanyProvider } from '@/context/CompanyContext';
import React, { useEffect } from 'react'; // ðŸ‘ˆ Import React hooks

// Client-side cache, shared for the whole session of the user in the browser.
const clientSideEmotionCache = createEmotionCache();

interface MyAppProps extends AppProps {
Â  emotionCache?: EmotionCache;
}

// 1. Define your professional, SaaS-based theme (UNMODIFIED)
const theme = createTheme({
Â  // ... theme configuration ...
Â  palette: {
Â  Â  primary: {
Â  Â  Â  main: '#039BE5', 
Â  Â  },
Â  Â  secondary: {
Â  Â  Â  main: '#FFC107',
Â  Â  },
Â  Â  background: {
Â  Â  Â  default: '#f4f6f8', 
Â  Â  },
Â  },
Â  typography: {
Â  Â  fontFamily: [
Â  Â  Â  'Inter',
Â  Â  Â  'Roboto',
Â  Â  Â  '"Helvetica Neue"',
Â  Â  Â  'Arial',
Â  Â  Â  'sans-serif',
Â  Â  ].join(','),
Â  },
Â  components: {
Â  Â  MuiButton: {
Â  Â  Â  defaultProps: {
Â  Â  Â  Â  disableElevation: true, 
Â  Â  Â  },
Â  Â  },
Â  Â  MuiPaper: {
Â  Â  Â  Â  styleOverrides: {
Â  Â  Â  Â  Â  Â  root: {
Â  Â  Â  Â  Â  Â  Â  Â  boxShadow: '0 4px 20px 0 rgba(0,0,0,.05)' 
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }
Â  }
});

// --- NEW COMPONENT FOR GLOBAL AUTH REDIRECT LOGIC ---
const AuthRedirectWrapper: React.FC<React.PropsWithChildren<{}>> = ({ children }) => {
    const router = useRouter();
    // ðŸ’¡ IMPORTANT: This assumes your useAuth hook provides an 'isAuthenticated' status
    const { user, isLoading } = useAuth(); 

    useEffect(() => {
        // Only run this client-side logic after auth state is determined
        if (isLoading) return; 

        // Define which routes are public (no authentication required)
        const publicRoutes = ['/login', '/register', '/forgot-password'];
        const currentPath = router.pathname;
        const isPublicRoute = publicRoutes.includes(currentPath);

        // 1. If user is at the root ('/') AND not authenticated, redirect to /login
        if (currentPath === '/' && !user) {
            router.replace('/login');
        } 
        
        // 2. If user is NOT authenticated AND trying to access a protected route (not public), redirect to /login
        else if (!user && !isPublicRoute) {
            router.replace('/login');
        }
        
        // 3. If user IS authenticated AND trying to access / or /login, redirect to /dashboard
        else if (user && (currentPath === '/' || currentPath === '/login')) {
            router.replace('/dashboard');
        }

    // Dependency array ensures this runs when router changes or auth state changes
    }, [user, isLoading, router.pathname, router]); 

    // If still loading, or if the user is on a public page and not authenticated, render the children immediately
    // If the user is authenticated and is on /dashboard, render dashboard immediately
    if (isLoading) {
        // You can return a global loading spinner here if preferred
        return <div>Loading authentication state...</div>; 
    }
    
    return <>{children}</>;
};

// --- MODIFIED MYAPP COMPONENT ---
export default function MyApp(props: MyAppProps) {
Â  const { Component, emotionCache = clientSideEmotionCache, pageProps } = props;

Â  return (
Â  Â  <CacheProvider value={emotionCache}>
Â  Â  Â  <ThemeProvider theme={theme}>
Â  Â  Â  Â  <CssBaseline />
Â  Â  Â  Â  Â  <AuthProvider>
                {/* ðŸ‘ˆ WRAPPER ADDED HERE */}
                <AuthRedirectWrapper> 
Â  Â  Â  Â  Â  Â  Â        <CompanyProvider>
Â  Â  Â  Â  Â  Â  Â  Â          <Component {...pageProps} />
Â  Â  Â  Â  Â  Â  Â        </CompanyProvider>
                </AuthRedirectWrapper>
Â  Â  Â  Â  Â  </AuthProvider>
Â  Â  Â  </ThemeProvider>
Â  Â  </CacheProvider>
Â  );
}